/*
 * Automatically generated by preplate
 */
goog.provide('pdemo.data.model.Date');

goog.require('goog.json');

goog.require('prestans.types.Model.EventType');
goog.require('prestans.types.Model.AttributeChangedEvent');

goog.require('prestans.types.Model');

goog.require('prestans.types.Date');

/**
 * @constructor
 * @extends {prestans.types.Model}
*/
pdemo.data.model.Date = function(opt_json) {

    //Setup base model
    prestans.types.Model.call(this);

    if(goog.isDefAndNotNull(opt_json)) {
        this.dateRequired_ = new prestans.types.Date({value: opt_json["date_required"], required: true, default: null});
        this.dateDefaultToday_ = new prestans.types.Date({value: opt_json["date_default_today"], required: true, default: "_PRESTANS_CONSTANT_MODEL_DATE_TODAY"});
        this.dateNotRequired_ = new prestans.types.Date({value: opt_json["date_not_required"], required: false, default: null});
        this.dateDefaultString_ = new prestans.types.Date({value: opt_json["date_default_string"], required: true, default: "2013-01-02"});
    }
    else {
        this.dateRequired_ = new prestans.types.Date({required: true, default: null});
        this.dateDefaultToday_ = new prestans.types.Date({required: true, default: "_PRESTANS_CONSTANT_MODEL_DATE_TODAY"});
        this.dateNotRequired_ = new prestans.types.Date({required: false, default: null});
        this.dateDefaultString_ = new prestans.types.Date({required: true, default: "2013-01-02"});
    }
};
goog.inherits(pdemo.data.model.Date, prestans.types.Model);



pdemo.data.model.Date.prototype.dateRequired_ = null;
pdemo.data.model.Date.prototype.dateDefaultToday_ = null;
pdemo.data.model.Date.prototype.dateNotRequired_ = null;
pdemo.data.model.Date.prototype.dateDefaultString_ = null;


pdemo.data.model.Date.prototype.getDateRequired = function() {
    return this.dateRequired_.getValue();
};

pdemo.data.model.Date.prototype.setDateRequired = function(value) {
    var previousValue_ = this.dateRequired_.getValue();
    var success_ = this.dateRequired_.setValue(value);
    this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "dateRequired", previousValue_, this.dateRequired_.getValue()));
    return success_;
};



pdemo.data.model.Date.prototype.getDateDefaultToday = function() {
    return this.dateDefaultToday_.getValue();
};

pdemo.data.model.Date.prototype.setDateDefaultToday = function(value) {
    var previousValue_ = this.dateDefaultToday_.getValue();
    var success_ = this.dateDefaultToday_.setValue(value);
    this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "dateDefaultToday", previousValue_, this.dateDefaultToday_.getValue()));
    return success_;
};



pdemo.data.model.Date.prototype.getDateNotRequired = function() {
    return this.dateNotRequired_.getValue();
};

pdemo.data.model.Date.prototype.setDateNotRequired = function(value) {
    var previousValue_ = this.dateNotRequired_.getValue();
    var success_ = this.dateNotRequired_.setValue(value);
    this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "dateNotRequired", previousValue_, this.dateNotRequired_.getValue()));
    return success_;
};



pdemo.data.model.Date.prototype.getDateDefaultString = function() {
    return this.dateDefaultString_.getValue();
};

pdemo.data.model.Date.prototype.setDateDefaultString = function(value) {
    var previousValue_ = this.dateDefaultString_.getValue();
    var success_ = this.dateDefaultString_.setValue(value);
    this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "dateDefaultString", previousValue_, this.dateDefaultString_.getValue()));
    return success_;
};



pdemo.data.model.Date.prototype.setValueForKey = function(key, value) {

    var returnVal_ = null;

    switch(key)
    {
        case "dateRequired":
            returnVal_ = this.setDateRequired(value);
            break;
        case "dateDefaultToday":
            returnVal_ = this.setDateDefaultToday(value);
            break;
        case "dateNotRequired":
            returnVal_ = this.setDateNotRequired(value);
            break;
        case "dateDefaultString":
            returnVal_ = this.setDateDefaultString(value);
            break;
        default:
            throw "Key: "+key+" not found in model";
    }

    return returnVal_;

};