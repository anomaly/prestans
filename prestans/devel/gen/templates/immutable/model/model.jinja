{% import 'immutable/model/macro.jinja' as model %}
/**
 * Automatically generated by pride
 */
import { {% if attributes|selectattr("blueprint_type", "==", "array")|first %}List, {% endif %}Record } from 'immutable';
import { {% if attributes|selectattr("blueprint_type", "==", "array")|selectattr("element_template_is_model", "==", True)|first %}createListFromJSON, {% endif %}filterByKey } from 'prestans-fetch';
import * as yup from 'yup';
import Filter from '{{filter_namespace}}{{name}}';
{% for dependency in dependencies %}
import {{dependency}} from './{{dependency}}';
{% endfor %}

{% for attribute in attributes %}
{% if (attribute.blueprint_type != 'model' and attribute.blueprint_type != 'array') or (attribute.blueprint_type == 'array' and not attribute.element_template_is_model) -%}
{{model.generateSchema(attribute)}}

{%- endif %}
{% endfor %}
const MINIFIED_SCHEMA = yup
    .object()
    .shape({
{% for attribute in attributes %}
        {{attribute.map_name}}: yup.mixed(){% if not loop.last %},{% endif %}

{% endfor %}
    })
{% for attribute in attributes %}
    .from('{{attribute.name}}', '{{attribute.map_name}}'){% if loop.last %};{% endif %}

{% endfor %}

const REVERSE_MINIFIED_SCHEMA = yup
    .object()
    .shape({
{% for attribute in attributes %}
        {{attribute.name}}: yup.mixed(){% if not loop.last %},{% endif %}

{% endfor %}
    })
{% for attribute in attributes %}
    .from('{{attribute.map_name}}', '{{attribute.name}}'){% if loop.last %};{% endif %}

{% endfor %}

const DEFAULT_VALUES = {
{% for attribute in attributes %}
{%- if attribute.default != 'null' -%}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'array' %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}

{% else %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}

{% endif %}
{% else %}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: null{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'array' %}
    {{attribute.name}}: []{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'string' %}
    {{attribute.name}}: ''{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'integer' or attribute.blueprint_type == 'number' %}
    {{attribute.name}}: 0{% if not loop.last %},{% endif %}

{% endif %}
{%- endif -%}
{% endfor %}
};

export default class {{name}} extends Record(DEFAULT_VALUES) {
    constructor(json = DEFAULT_VALUES, minified = false) {
        const {
{% for attribute in attributes %}
            {{attribute.name}}{% if not loop.last %},{% endif %}

{% endfor %}
        } = !minified ? json : REVERSE_MINIFIED_SCHEMA.cast(json);

        super({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
            {{attribute.name}}: {{attribute.name}} && new {{attribute.model_template}}({{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && createListFromJSON({{attribute.element_template}}, {{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and not attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && new List({{attribute.cc}}Schema.cast({{attribute.name}})){% if not loop.last %},{% endif %}
{% else %}
            {{attribute.name}}: {{attribute.cc}}Schema.cast({{attribute.name}}){% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
        });

        this.minified = minified;
    }

{% for attribute in attributes %}
    {{model.getMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{model.setMethod(namespace, name, attribute)}}

{% endfor %}
    applyFilter(filter) {
        return filter && filter instanceof Filter ? filterByKey(this, filter) : this;
    }

    getJSONObject(filter) {
        const json = this.applyFilter(filter).toJS();
        return !this.minified ? json : MINIFIED_SCHEMA.cast(json)
    }

    getJSONString(filter) {
        return JSON.stringify(this.getJSONObject(filter));
    }
}
