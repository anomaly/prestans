{% import 'immutablejs/filter/macro.jinja' as filter %}
/**
 * Automatically generated by pride
 */
 import { Record } from 'immutable';

{% for dependency in dependencies %}
import {{dependency}} from './{{dependency}}';
{% endfor %}

const buildJS = value => {{ '({' }}
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: new {{attribute.model_template}}{% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' or attribute.element_template_is_model%}
    {{attribute.name}}: new {{attribute.element_template}}{% if not loop.last %},{% endif %}
{% else %}
    {{attribute.name}}: value{% if not loop.last %},{% endif %}
{% endif %}
{% endfor %}
{{ '});' }})

const defaultValue = false;

export default class {{name}} extends Record(buildJS(defaultValue)) {
    constructor(opt_initialValue) {
        if (typeof opt_initialValue !== 'boolean) opt_initialValue = defaultValue;
        super(buildJS(opt_initialValue));
    }

    {% for attribute in attributes %}
    {{filter.enableMethod(namespace, name, attribute)}}
    {% endfor %}

    {% for attribute in attributes %}
    {{filter.disableMethod(namespace, name, attribute)}}
    {% endfor %}

    {% for attribute in attributes %}
    {{filter.getMethod(namespace, name, attribute)}}
    {% endfor %}

    {% for attribute in attributes %}
    {{filter.setMethod(namespace, name, attribute)}}
    {% endfor %}

    getJSONObject() {
        return this.toJS();
    }

    getJSONString() {
        return JSON.stringify(this);
    }
}
