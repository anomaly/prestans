{% import 'immutable/filter/macro.jinja' as filter %}
/**
 * Automatically generated by pride
 */
import { Record } from 'immutable';
import { filterByKey } from 'prestans-fetch';
{% for dependency in dependencies %}
import {{dependency}} from './{{dependency}}';
{% endfor %}

const buildJS = value => {{ '({' }}
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: new {{attribute.model_template}}(value){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model%}
    {{attribute.name}}: new {{attribute.element_template}}(value){% if not loop.last %},{% endif %}
{% else %}
    {{attribute.name}}: value{% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
{{ '});' }}

const defaultValue = false;

export default class {{name}} extends Record(buildJS(defaultValue)) {
    constructor(opt_initialValue) {
        let value = opt_initialValue
        if (typeof opt_initialValue !== 'boolean') value = defaultValue;
        super(buildJS(value));
    }

{% for attribute in attributes %}
    {{filter.enableMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{filter.disableMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{filter.getMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{filter.setMethod(namespace, name, attribute)}}

{% endfor %}
    applyFilter() {
        return filterByKey(this, this);
    }

    getJSONObject() {
        return this.applyFilter().toJS();
    }

    getJSONString() {
        return JSON.stringify(this.applyFilter());
    }
}
