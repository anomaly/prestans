{% import 'immutable/model/macro.jinja' as model %}
/**
 * Automatically generated by pride
 */
import { {% if attributes|selectattr("blueprint_type", "==", "array")|first %}List, {% endif %}Record } from 'immutable';
import { {% if attributes|selectattr("blueprint_type", "==", "array")|selectattr("element_template_is_model", "==", True)|first %}createListFromJSON, {% endif %}filterByKey } from 'prestans-fetch';
{% if attribute|selectattr("blueprint_type", "!=", ["model", "array"])|first or attribute|selectattr("blueprint_type", "==", "array")|selectattr("element_template_is_model", "==", False) %}import * as yup from 'yup';
{% endif %}
import Filter from '{{filter_namespace}}{{name}}';
{% for dependency in dependencies %}
import {{dependency}} from './{{dependency}}';
{% endfor %}

{% for attribute in attributes %}
{% if (attribute.blueprint_type != 'model' and attribute.blueprint_type != 'array') or (attribute.blueprint_type == 'array' and not attribute.element_template_is_model) -%}
{{model.generateSchema(attribute)}}

{%- endif %}
{% endfor %}
const defaultValues = {
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}
{% else %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
};
export default class {{name}} extends Record(defaultValues) {
    constructor({
{% for attribute in attributes %}
        {{attribute.name}}{% if not loop.last %},{% endif %}

{% endfor %}
    } = defaultValues) {
        super({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
            {{attribute.name}}: {{attribute.name}} && new {{attribute.model_template}}({{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && createListFromJSON({{attribute.element_template}}, {{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and not attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && new List({{attribute.cc}}Schema.cast({{attribute.name}})){% if not loop.last %},{% endif %}
{% else %}
            {{attribute.name}}: {{attribute.cc}}Schema.cast({{attribute.name}}){% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
        });
    }

{% for attribute in attributes %}
    {{model.getMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{model.setMethod(namespace, name, attribute)}}

{% endfor %}
    applyFilter(filter) {
        return filter && filter instanceof Filter ? filterByKey(this, filter) : this;
    }

    getJSONObject(filter) {
        return this.applyFilter(filter).toJS();
    }

    getJSONString(filter) {
        return JSON.stringify(this.applyFilter(filter));
    }
}
