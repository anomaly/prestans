{% import 'immutable/model/macro.jinja' as model %}
/**
 * Automatically generated by pride
 */
import { {% if attributes|selectattr("blueprint_type", "equalto", "array")|selectattr("element_template_is_model", "equalto", False)|first %}List, {% endif %}Record } from 'immutable';
import { {% if attributes|selectattr("blueprint_type", "equalto", "array")|selectattr("element_template_is_model", "equalto", True)|first %}createListFromJSON, {% endif %}filterByKey } from 'prestans-fetch';
import Filter from '{{filter_namespace}}{{name}}';
{% for dependency in dependencies %}
import {{dependency}} from './{{dependency}}';
{% endfor %}

export default class {{name}} extends Record({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: ''{% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' %}
    {{attribute.name}}: []{% if not loop.last %},{% endif %}
{% elif attribute.element_template_is_model %}
    {{attribute.name}}: ''{% if not loop.last %},{% endif %}
{% else %}
    {{attribute.name}}: ''{% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
}) {
{% if attributes|selectattr("blueprint_type", "equalto", "array")|first or dependencies|length > 0 %}
    constructor({
{% for attribute in attributes %}
        {{attribute.name}}{% if not loop.last %},{% endif %}

{% endfor %}
    } = {}) {
        super({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
            {{attribute.name}}: {{attribute.name}} && new {{attribute.model_template}}({{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && createListFromJSON({{attribute.element_template}}, {{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and not attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && new List({{attribute.name}}){% if not loop.last %},{% endif %}
{% else %}
            {{attribute.name}}{% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
        });
    }

{% endif %}
{% for attribute in attributes %}
    {{model.getMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{model.setMethod(namespace, name, attribute)}}

{% endfor %}
    applyFilter(filter) {
        return filter && filter instanceof Filter ? filterByKey(this, filter) : this;
    }

    getJSONObject(filter) {
        return this.applyFilter(filter).toJS();
    }

    getJSONString(filter) {
        return JSON.stringify(this.applyFilter(filter));
    }
}
