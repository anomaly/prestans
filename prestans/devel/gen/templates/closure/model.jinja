/*
 * Automatically generated by preplate
 */
goog.provide('{{namespace}}.{{name}}');

goog.require('goog.json');

goog.require('prestans.types.Model.EventType');
goog.require('prestans.types.Model.AttributeChangedEvent');

goog.require('prestans.types.Model');

{% for dependency in dependencies %}
goog.require('{{dependency}}');
{% endfor %}

/**
 * @constructor
 * @extends {prestans.types.Model}
*/
{{namespace}}.{{name}} = function(opt_json, opt_minified) {

    //Setup base model
    prestans.types.Model.call(this);

    if(goog.isDef(opt_minified) && goog.isBoolean(opt_minified) && opt_minified && goog.isDefAndNotNull(opt_json)) {
{% for attribute in attributes %}
{% if attribute.type == 'model' %}
        this.{{attribute.ccif}}_ = new {{namespace}}.{{attribute.model_template}}(opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]]);
{% elif attribute.type == 'array' %}
{% if attribute.element_template_is_model %}
        this.{{attribute.ccif}}_ = new prestans.types.Array({elementTemplate: {{namespace}}.{{attribute.element_template}}, opt_json: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], maxLength: {{attribute.max_length}}, minLength: {{attribute.min_length}}});
{% else %}
        this.{{attribute.ccif}}_ = new prestans.types.Array({elementTemplate: prestans.types.{{attribute.element_template}}, opt_json: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], {{attribute.max_length}}, {{attribute.min_length}});
{% endif %}
{% elif attribute.type == 'string' %}
        this.{{attribute.ccif}}_ = new prestans.types.String({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}, maxLength: {{attribute.max_length}}, minLength: {{attribute.min_length}}, format: {{attribute.format}}, choices: {{attribute.choices}}});
{% elif attribute.type == 'boolean' %}
        this.{{attribute.ccif}}_ = new prestans.types.Boolean({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == 'integer' %}
        this.{{attribute.ccif}}_ = new prestans.types.Integer({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}, maximum: {{attribute.maximum}}, minimum: {{attribute.minimum}}, choices: {{attribute.choices}}});
{% elif attribute.type == 'float' %}
        this.{{attribute.ccif}}_ = new prestans.types.Float({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}, maximum: {{attribute.maximum}}, minimum: {{attribute.minimum}}, choices: {{attribute.choices}}});
{% elif attribute.type == 'datetime' %}
        this.{{attribute.ccif}}_ = new prestans.types.DateTime({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == 'date' %}
        this.{{attribute.ccif}}_ = new prestans.types.Date({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == 'time' %}
        this.{{attribute.ccif}}_ = new prestans.types.Time({value: opt_json[{{namespace}}.{{name}}.REWRITE_MAP["{{attribute.name}}"]], required: {{attribute.required}}, default: {{attribute.default}}});
{% endif %}
{% endfor %}
    }
    else if(goog.isDefAndNotNull(opt_json)) {
{% for attribute in attributes %}
{% if attribute.type == 'model' %}
        this.{{attribute.ccif}}_ = new {{namespace}}.{{attribute.model_template}}(opt_json["{{attribute.name}}"]);
{% elif attribute.type == 'array' %}
{% if attribute.element_template_is_model %}
        this.{{attribute.ccif}}_ = new prestans.types.Array({elementTemplate: {{namespace}}.{{attribute.element_template}}, opt_json: opt_json["{{attribute.name}}"], maxLength: {{attribute.max_length}}, minLength: {{attribute.min_length}}});
{% else %}
        this.{{attribute.ccif}}_ = new prestans.types.Array({elementTemplate: prestans.types.{{attribute.element_template}}, opt_json: opt_json["{{attribute.name}}"], {{attribute.max_length}}, {{attribute.min_length}});
{% endif %}
{% elif attribute.type == 'string' %}
        this.{{attribute.ccif}}_ = new prestans.types.String({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}, maxLength: {{attribute.max_length}}, minLength: {{attribute.min_length}}, format: {{attribute.format}}, choices: {{attribute.choices}}});
{% elif attribute.type == 'boolean' %}
        this.{{attribute.ccif}}_ = new prestans.types.Boolean({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == 'integer' %}
        this.{{attribute.ccif}}_ = new prestans.types.Integer({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}, maximum: {{attribute.maximum}}, minimum: {{attribute.minimum}}, choices: {{attribute.choices}}});
{% elif attribute.type == 'float' %}
        this.{{attribute.ccif}}_ = new prestans.types.Float({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}, maximum: {{attribute.maximum}}, minimum: {{attribute.minimum}}, choices: {{attribute.choices}}});
{% elif attribute.type == 'datetime' %}
        this.{{attribute.ccif}}_ = new prestans.types.DateTime({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == 'date' %}
        this.{{attribute.ccif}}_ = new prestans.types.Date({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == 'time' %}
        this.{{attribute.ccif}}_ = new prestans.types.Time({value: opt_json["{{attribute.name}}"], required: {{attribute.required}}, default: {{attribute.default}}});
{% endif %}
{% endfor %}
    }
    else {
{% for attribute in attributes %}
{% if attribute.type == 'model' %}
        this.{{attribute.ccif}}_ = new {{namespace}}.{{attribute.model_template}}();
{% elif attribute.type == 'array' %}
{% if attribute.element_template_is_model %}
        this.{{attribute.ccif}}_ = new prestans.types.Array({elementTemplate: {{namespace}}.{{attribute.element_template}}, maxLength: {{attribute.max_length}}, minLength: {{attribute.min_length}}});
{% else %}
        this.{{attribute.ccif}}_ = new prestans.types.Array({elementTemplate: prestans.types.{{attribute.element_template}}, maxLength: {{attribute.max_length}}, minLength: {{attribute.min_length}}});
{% endif %}
{% elif attribute.type == "string" %}
        this.{{attribute.ccif}}_ = new prestans.types.String({required: {{attribute.required}}, default: {{attribute.default}}, max_length: {{attribute.max_length}}, min_length: {{attribute.min_length}}, format: {{attribute.format}}, choices: {{attribute.choices}}});
{% elif attribute.type == "boolean" %}
        this.{{attribute.ccif}}_ = new prestans.types.Boolean({required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == "integer" %}
        this.{{attribute.ccif}}_ = new prestans.types.Integer({required: {{attribute.required}}, default: {{attribute.default}}, maximum: {{attribute.maximum}}, minimum: {{attribute.minimum}}, choices: {{attribute.choices}}});
{% elif attribute.type == "float" %}
        this.{{attribute.ccif}}_ = new prestans.types.Float({required: {{attribute.required}}, default: {{attribute.default}}, maximum: {{attribute.maximum}}, minimum: {{attribute.minimum}}, choices: {{attribute.choices}}});
{% elif attribute.type == "datetime" %}
        this.{{attribute.ccif}}_ = new prestans.types.DateTime({required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == "date" %}
        this.{{attribute.ccif}}_ = new prestans.types.Date({required: {{attribute.required}}, default: {{attribute.default}}});
{% elif attribute.type == "time" %}
        this.{{attribute.ccif}}_ = new prestans.types.Time({required: {{attribute.required}}, default: {{attribute.default}}});
{% endif %}
{% endfor %}
    }
};
goog.inherits({{namespace}}.{{name}}, prestans.types.Model);



{% for attribute in attributes %}
{{namespace}}.{{name}}.prototype.{{attribute.ccif}}_ = null;
{% if attribute.format != "null" %}
{{namespace}}.{{name}}.{{attribute.cc}}StringFormat = new RegExp({{attribute.format}});
{% endif %}
{% if isinstance(attribute.choices, list) %}
{{namespace}}.{{name}}.{{attribute.cc}}Choices = {{attribute.choices}};
{% endif %}
{% endfor %}

//Rewrite map
{{namespace}}.{{name}}.REWRITE_MAP = {
{% for attribute in attributes %}
{% if loop.last %}
    "{{attribute.name}}": "{{attribute.map_name}}"
{% else %}
    "{{attribute.name}}": "{{attribute.map_name}}",
{% endif %}
{% endfor %}
};

//Reverse rewrite map
{{namespace}}.{{name}}.REVERSE_REWRITE_MAP = {
{% for attribute in attributes %}
{% if loop.last %}
    "{{attribute.map_name}}": "{{attribute.name}}"
{% else %}
    "{{attribute.map_name}}": "{{attribute.name}}",
{% endif %}
{% endfor %}
};

{% for attribute in attributes %}
{{namespace}}.{{name}}.prototype.get{{attribute.cc}} = function() {
{% if attribute.type == 'model' or attribute.type == 'array' %}
    return this.{{attribute.ccif}}_;
{% else %}
    return this.{{attribute.ccif}}_.getValue();
{% endif %}
};

{{namespace}}.{{name}}.prototype.set{{attribute.cc}} = function(value) {
{% if attribute.type == 'array' %}
    var previousArray_ = this.{{attribute.ccif}}_;
{% if attribute.element_template_is_model %}
    if(value instanceof prestans.types.Array && value.getElementTemplate() == {{namespace}}.{{attribute.element_template}}) {
{% else %}
    if(value instanceof prestans.types.Array && value.getElementTemplate() == prestans.types.{{attribute.element_template}}) {
{% endif %}
        this.{{attribute.ccif}}_ = value;
        this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "{{attribute.ccif}}", previousArray_, this.{{attribute.ccif}}_));
        return true;
    }
    else
        return false;
{% elif attribute.type == 'model' %}
    var previousModel_ = this.{{attribute.ccif}}_;
    if(value instanceof {{namespace}}.{{attribute.model_template}}) {
        this.{{attribute.ccif}}_ = value;
        this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "{{attribute.ccif}}", previousModel_, this.{{attribute.ccif}}_));
        return true;
    }
    else
        return false;
{% else %}
    var previousValue_ = this.{{attribute.ccif}}_.getValue();
    var success_ = this.{{attribute.ccif}}_.setValue(value);
    this.dispatchEvent(new prestans.types.Model.AttributeChangedEvent(prestans.types.Model.EventType.ATTRIBUTE_CHANGED, "{{attribute.ccif}}", previousValue_, this.{{attribute.ccif}}_.getValue()));
    return success_;
{% endif %}
};



{% endfor %}
{{namespace}}.{{name}}.prototype.setValueForKey = function(key, value) {

    var returnVal_ = null;

    switch(key)
    {
{% for attribute in attributes %}
        case "{{attribute.ccif}}":
            returnVal_ = this.set{{attribute.cc}}(value);
            break;
{% endfor %}
        default:
            throw "Key: "+key+" not found in model";
    }

    return returnVal_;

};



{{namespace}}.{{name}}.prototype.getJSONObject = function(opt_filter) {

    var jsonifiedObject_ = {};
    
{% for attribute in attributes %}
{% if attribute.type == 'model' %}
    if(goog.isDef(opt_filter) && opt_filter.get{{attribute.cc}}().anyFieldsEnabled()) {
        if(this.get{{attribute.cc}}() == null)
            jsonifiedObject_["{{attribute.name}}"] = null;
        else
            jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}().getJSONObject(opt_filter.get{{attribute.cc}}());
    }
    else if(!goog.isDef(opt_filter)) {
        if(this.get{{attribute.cc}}() == null)
            jsonifiedObject_["{{attribute.name}}"] = null;
        else
            jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}().getJSONObject();
    }
{% elif attribute.type == 'array' %}
{% if attribute.element_template_is_model %}
    if(goog.isDef(opt_filter) && opt_filter.get{{attribute.cc}}().anyFieldsEnabled())
        jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}().getJSONObject(opt_filter.get{{attribute.cc}}());
    else if(!goog.isDef(opt_filter))
        jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}().getJSONObject();
{% else %}
    if(goog.isDef(opt_filter) && opt_filter.get{{attribute.cc}}())
        jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}().getJSONObject(opt_filter.get{{attribute.cc}}());
    else if(!goog.isDef(opt_filter))
        jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}().getJSONObject();
{% endif %}
{% elif attribute.type == 'datetime' or attribute.type == 'date' or attribute.type == 'time' %}
    if(goog.isDef(opt_filter) && opt_filter.get{{attribute.cc}}())
        jsonifiedObject_["{{attribute.name}}"] = this.{{attribute.ccif}}_.getJSONObject();
    else if(!goog.isDef(opt_filter))
        jsonifiedObject_["{{attribute.name}}"] = this.{{attribute.ccif}}_.getJSONObject();
{% else %}
    if(goog.isDef(opt_filter) && opt_filter.get{{attribute.cc}}())
        jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}()
    else if(!goog.isDef(opt_filter))
        jsonifiedObject_["{{attribute.name}}"] = this.get{{attribute.cc}}()
{% endif %}
{% endfor %}

    return jsonifiedObject_;
};

{{namespace}}.{{name}}.prototype.getJSONString = function(opt_filter) {
    return goog.json.serialize(this.getJSONObject(opt_filter));
};