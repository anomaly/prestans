{% import 'immutable/model/macro.jinja' as model %}
/**
 * Automatically generated by pride
 */
import { {% if attributes|selectattr("blueprint_type", "==", "array")|first %}List, {% endif %}Record } from 'immutable';
import { {% if attributes|selectattr("blueprint_type", "==", "array")|selectattr("element_template_is_model", "==", True)|first %}createListFromJSON, {% endif %}filterByKey } from 'prestans-fetch';
import * as yup from 'yup';
import Filter from '{{filter_namespace}}{{name}}';
{% for dependency in dependencies %}
import {{dependency}}, { MINIFIED_SCHEMA as {{dependency|upper}}_MINIFIED_SCHEMA, REVERSE_MINIFIED_SCHEMA as {{dependency|upper}}_REVERSE_MINIFIED_SCHEMA } from './{{dependency}}';
{% endfor %}

{% for attribute in attributes %}
{% if (attribute.blueprint_type != 'model' and attribute.blueprint_type != 'array') or (attribute.blueprint_type == 'array' and not attribute.element_template_is_model) -%}
{{model.generateSchema(attribute)}}

{%- endif %}
{% endfor %}
export const MINIFIED_SCHEMA = yup
    .object()
    .shape({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
        {{attribute.map_name}}: yup.lazy(value => value === undefined
            ? yup.mixed().nullable()
            : {{attribute.model_template|upper}}_MINIFIED_SCHEMA
        ){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
        {{attribute.map_name}}: yup.lazy(value => value === undefined
            ? yup.mixed().nullable()
            : yup.array().of({{attribute.element_template|upper}}_MINIFIED_SCHEMA)
        ){% if not loop.last %},{% endif %}
{% else %}
        {{attribute.map_name}}: yup.mixed().nullable(){% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
    })
    .nullable()
{% for attribute in attributes %}
    .from('{{attribute.name}}', '{{attribute.map_name}}'){% if loop.last %};{% endif %}

{% endfor %}

export const REVERSE_MINIFIED_SCHEMA = yup
    .object()
    .shape({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
        {{attribute.name}}: yup.lazy(value => value === undefined
            ? yup.mixed().nullable()
            : {{attribute.model_template|upper}}_REVERSE_MINIFIED_SCHEMA
        ){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
        {{attribute.name}}: yup.lazy(value => value === undefined
            ? yup.mixed().nullable()
            : yup.array().of({{attribute.element_template|upper}}_REVERSE_MINIFIED_SCHEMA)
        ){% if not loop.last %},{% endif %}
{% else %}
        {{attribute.name}}: yup.mixed().nullable(){% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
    })
    .nullable()
{% for attribute in attributes %}
    .from('{{attribute.map_name}}', '{{attribute.name}}'){% if loop.last %};{% endif %}

{% endfor %}

export const Meta = {
{% for attribute in attributes %}
{% if attribute.blueprint_type == "string" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}},
        MAX_LENGTH: {{attribute.max_length}},
        MIN_LENGTH: {{attribute.min_length}},
        FORMAT: {{attribute.format}},
        CHOICES: {{attribute.choices}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "boolean" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "integer" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}},
        MAXIMUM: {{attribute.maximum}},
        MININUM: {{attribute.minimum}},
        CHOICES: {{attribute.choices}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "float" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}},
        MAXIMUM: {{attribute.maximum}},
        MININUM: {{attribute.minimum}},
        CHOICES: {{attribute.choices}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "datetime" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}},
        TIMEZONE: {{attribute.timezone}},
        UTC: {{attribute.utc}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "date" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "time" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        DEFAULT: {{attribute.default}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "data_url_file" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}},
        ALLOWED_MIME_TYPES: {{attribute.default}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "model" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% if attribute.blueprint_type == "array" %}
    {{attribute.cc}}: {
        REQUIRED: {{attribute.required}}
{% if loop.last %}
    }
{% else %}
    },
{% endif %}
{% endif %}
{% endfor %}
};

const DEFAULT_VALUES = {
{% for attribute in attributes %}
{%- if attribute.default != 'null' -%}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'array' %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}

{% else %}
    {{attribute.name}}: {{attribute.default}}{% if not loop.last %},{% endif %}

{% endif %}
{% else %}
{% if attribute.blueprint_type == 'model' %}
    {{attribute.name}}: null{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'array' %}
    {{attribute.name}}: []{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'string' %}
    {{attribute.name}}: ''{% if not loop.last %},{% endif %}

{% elif attribute.blueprint_type == 'integer' or attribute.blueprint_type == 'number' %}
    {{attribute.name}}: 0{% if not loop.last %},{% endif %}

{% else %}
    {{attribute.name}}: null{% if not loop.last %},{% endif %}

{% endif %}
{%- endif -%}
{% endfor %}
};

export default class {{name}} extends Record(DEFAULT_VALUES) {
    constructor(json = DEFAULT_VALUES, minified = false) {
        const {
{% for attribute in attributes %}
            {{attribute.name}}{% if not loop.last %},{% endif %}

{% endfor %}
        } = !minified ? json : REVERSE_MINIFIED_SCHEMA.cast(json);

        super({
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
            {{attribute.name}}: {{attribute.name}} && new {{attribute.model_template}}({{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && createListFromJSON({{attribute.element_template}}, {{attribute.name}}){% if not loop.last %},{% endif %}
{% elif attribute.blueprint_type == 'array' and not attribute.element_template_is_model %}
            {{attribute.name}}: {{attribute.name}} && new List({{attribute.cc}}Schema.cast({{attribute.name}})){% if not loop.last %},{% endif %}
{% else %}
            {{attribute.name}}: {{attribute.cc}}Schema.cast({{attribute.name}}){% if not loop.last %},{% endif %}
{% endif %}

{% endfor %}
        });
    }

{% for attribute in attributes %}
    {{model.getMethod(namespace, name, attribute)}}

{% endfor %}
{% for attribute in attributes %}
    {{model.setMethod(namespace, name, attribute)}}

{% endfor %}
    applyFilter(filter = null) {
        return filter && filter instanceof Filter ? filterByKey(this, filter) : this;
    }

    merge(model = null, filter = null) {
        return (model && filter)
        ? this.withMutations(temp => {
{% for attribute in attributes %}
{% if attribute.blueprint_type == 'model' %}
            if (filter.get{{ attribute.cc }}()) temp.set{{ attribute.cc }}(temp.get{{ attribute.cc}}().merge(model.get{{ attribute.cc}}(), filter.get{{ attribute.cc }}()));
{% elif attribute.blueprint_type == 'array' and attribute.element_template_is_model %}
            if (filter.get{{ attribute.cc }}()) temp.set{{ attribute.cc }}(model.get{{ attribute.cc}}());
{% else %}
            if (filter.get{{ attribute.cc }}()) temp.set{{ attribute.cc }}(model.get{{ attribute.cc}}());
{% endif %}
{% endfor %}
        })
        :
        this;
    }

    getJSONObject(filter = null, minified = false) {
        const json = this.applyFilter(filter).toJS();
        return !minified ? json : MINIFIED_SCHEMA.cast(json)
    }

    getJSONString(filter = null, minified = false) {
        return JSON.stringify(this.getJSONObject(filter, minified));
    }
}
{{''}}
